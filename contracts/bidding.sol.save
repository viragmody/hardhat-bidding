pragma solidity ^0.7.3;
import "./escrow.sol";
import "hardhat/console.sol";

contract Bidding {
    // event4bid
    // event4initalize
    address public owner;
    struct auction {
        uint bidMin;
        uint duration;
        uint deadline;
        string description;
    }
    Escrow public escrowAddr;
    auction[] public Auctions;

    constructor(uint _bidMin, uint _minutes, string memory _description) public {
        owner = msg.sender;
        escrowAddr = new Escrow();
        auction memory Auction = auction({
            bidMin: _bidMin,
            duration: _minutes,
            deadline : block.timestamp + (_minutes * 1 minutes),
            description: _description
        });
        Auctions.push(Auction);
        console.log("bidMin is");
    }
    function depositBid() external payable returns(uint) {
        address bidder = (msg.sender);
        escrowAddr.record(payable(bidder));
        // emit4bid
    }
    

    function closeBid() public returns(uint) {
        // require(block.timestamp >= Auctions[0].deadline);
        escrowAddr.release();
    }

}
